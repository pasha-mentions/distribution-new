import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { Upload, Music, Image, CheckCircle, AlertCircle, ArrowLeft, ArrowRight, FileText, Plus, Trash2, Search, Globe } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

interface FileUpload {
  file: File | null;
  isValid: boolean;
  error?: string;
}

// Validation schema for release metadata
const releaseMetadataSchema = z.object({
  language: z.string().min(1, "–ú–æ–≤–∞ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"),
  title: z.string().min(1, "–ù–∞–∑–≤–∞ –∞–ª—å–±–æ–º—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"),
  albumVersion: z.string().optional(),
  primaryGenre: z.string().min(1, "–ì–æ–ª–æ–≤–Ω–∏–π –∂–∞–Ω—Ä –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  secondaryGenre: z.string().optional(),
  originalReleaseDate: z.string().min(1, "–î–∞—Ç–∞ –ø–µ—Ä—à–æ–≥–æ –≤–∏–ø—É—Å–∫—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"),
  releaseDate: z.string().optional(),
  subLabel: z.string().optional(),
  upc: z.string().min(1, "UPC –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  performers: z.array(z.object({
    name: z.string().min(1, "–Ü–º'—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"),
    role: z.string().min(1, "–ü–æ—Å–∞–¥–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"),
  })).max(5, "–ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º 5 –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤").optional(),
});

// Validation schema for track metadata
const trackMetadataSchema = z.object({
  title: z.string().min(1, "–ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"),
  version: z.string().optional(),
  primaryGenre: z.string().min(1, "–ì–æ–ª–æ–≤–Ω–∏–π –∂–∞–Ω—Ä –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  secondaryGenre: z.string().optional(),
  language: z.string().min(1, "–ú–æ–≤–∞ —Ä–µ–ª—ñ–∑—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"),
  explicitContent: z.enum(["yes", "no", "censored"]),
  previewStartTime: z.string().optional(),
  isrc: z.string().min(1, "ISRC –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  iswc: z.string().optional(),
  pLine: z.string().optional(),
  cLine: z.string().optional(),
  contributors: z.array(z.object({
    name: z.string().min(1, "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"),
    role: z.string().min(1, "–†–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"),
  })).optional(),
  hasNoMusic: z.boolean().default(false),
  hasNoLyrics: z.boolean().default(false),
  lyrics: z.string().optional(),
});

type ReleaseMetadata = z.infer<typeof releaseMetadataSchema>;
type TrackMetadata = z.infer<typeof trackMetadataSchema>;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∫—Ä–∞—ó–Ω —Ç–∞ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ñ–≤
const TERRITORIES_DATA = {
  "Europe": [
    "√Öland Islands", "Albania", "Andorra", "Austria", "Belarus", "Belgium", 
    "Bosnia and Herzegovina", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", 
    "Denmark", "Estonia", "Faroe Islands", "Finland", "Macedonia", "France", 
    "Germany", "Gibraltar", "Greece", "Guernsey", "Vatican", "Hungary", 
    "Iceland", "Ireland", "Isle of Man", "Italy", "Jersey", "Latvia", 
    "Liechtenstein", "Lithuania", "Luxembourg", "Malta", "Moldova", "Monaco", 
    "Montenegro", "Netherlands", "Norway", "Poland", "Portugal", "Romania", 
    "Russian Federation", "San Marino", "Serbia", "Slovakia", "Slovenia", 
    "Spain", "Sweden", "Switzerland", "Ukraine", "United Kingdom"
  ],
  "Asia": [
    "Afghanistan", "Armenia", "Azerbaijan", "Bahrain", "Bangladesh", "Bhutan", 
    "British Indian Ocean Territory", "Brunei Darussalam", "Cambodia", "China", 
    "Christmas Island", "Cocos (Keeling) Islands", "Georgia", "Hong Kong", 
    "India", "Indonesia", "Iran", "Iraq", "Israel", "Japan", "Jordan", 
    "Kazakhstan", "Kuwait", "Kyrgyzstan", "Lao People's Democratic Republic", 
    "Lebanon", "Macao", "Malaysia", "Maldives", "Mongolia", "Myanmar", "Nepal", 
    "North Korea", "Oman", "Pakistan", "Philippines", "Qatar", "Russian Federation", 
    "Saudi Arabia", "Singapore", "South Korea", "Sri Lanka", "Palestine", 
    "Syria", "Taiwan", "Tajikistan", "Thailand", "Timor-Leste", "Turkey", 
    "Turkmenistan", "United Arab Emirates", "Uzbekistan", "Vietnam", "Yemen"
  ],
  "North America": [
    "Anguilla", "Antigua and Barbuda", "Bahamas", "Barbados", "Belize", "Bermuda", 
    "Canada", "Cayman Islands", "Costa Rica", "Cuba", "Dominica", "Dominican Republic", 
    "El Salvador", "Greenland", "Grenada", "Guatemala", "Haiti", "Honduras", 
    "Jamaica", "Martinique", "Mexico", "Montserrat", "Nicaragua", "Panama", 
    "Puerto Rico", "Saint Barth√©lemy", "Saint Kitts and Nevis", "Saint Lucia", 
    "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Sint Maarten", 
    "Turks and Caicos Islands", "United States", "Virgin Islands"
  ],
  "South America": [
    "Argentina", "Aruba", "Bolivia", "Bonaire", "Brazil", "Chile", "Colombia", 
    "Cura√ßao", "Ecuador", "Falkland Islands (Malvinas)", "Guyana", "French Guiana", 
    "Suriname", "Paraguay", "Peru", "Trinidad and Tobago", "Uruguay", "Venezuela"
  ],
  "Africa": [
    "Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", 
    "Cape Verde", "Cameroon", "Central African Republic", "Chad", "Comoros", 
    "Congo, the Democratic Republic", "Djibouti", "Egypt", "Equatorial Guinea", 
    "Eritrea", "Ethiopia", "Gabon", "Gambia", "Ghana", "Guinea", "Guinea-Bissau", 
    "Ivory Coast", "Kenya", "Lesotho", "Liberia", "Libya", "Madagascar", 
    "Malawi", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique", 
    "Namibia", "Niger", "Nigeria", "Congo", "Rwanda", "Sao Tome and Principe", 
    "Senegal", "Seychelles", "Sierra Leone", "Somalia", "South Africa", 
    "South Sudan", "Sudan", "Swaziland", "Tanzania", "Togo", "Tunisia", 
    "Uganda", "Western Sahara", "Zambia", "Zimbabwe"
  ],
  "Oceania": [
    "American Samoa", "Australia", "Cook Islands", "Micronesia", "Fiji", 
    "French Polynesia", "Guam", "Kiribati", "Marshall Islands", "Nauru", 
    "New Zealand", "Niue", "Norfolk Island", "Northern Mariana Islands", 
    "Palau", "Papua New Guinea", "Pitcairn", "Samoa", "Solomon Islands", 
    "Tokelau", "Tonga", "Tuvalu", "Vanuatu"
  ]
};

export default function NewRelease() {
  console.log("üèÅ NewRelease component loading...");
  const { toast } = useToast();
  const [currentStep, setCurrentStep] = useState<"files" | "metadata" | "tracks" | "territories">("files");
  const [tracksMetadata, setTracksMetadata] = useState<TrackMetadata[]>([]);
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [isGeneratingIsrc, setIsGeneratingIsrc] = useState(false);
  const [selectedTerritories, setSelectedTerritories] = useState<Set<string>>(new Set());
  const [territorySearchQuery, setTerritorySearchQuery] = useState("");
  const [coverArt, setCoverArt] = useState<FileUpload>({ file: null, isValid: false });
  const [audioFiles, setAudioFiles] = useState<FileUpload[]>([{ file: null, isValid: false }]);
  const [isGeneratingUpc, setIsGeneratingUpc] = useState(false);
  const [hasAttemptedSubmit, setHasAttemptedSubmit] = useState(false);

  const form = useForm<ReleaseMetadata>({
    resolver: zodResolver(releaseMetadataSchema),
    defaultValues: {
      language: "",
      title: "",
      albumVersion: "",
      primaryGenre: "",
      secondaryGenre: "",
      originalReleaseDate: "",
      releaseDate: "",
      subLabel: "",
      upc: "",
      performers: [{ name: "", role: "" }],
    },
  });

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏
  const validateCoverArt = (file: File): { isValid: boolean; error?: string } => {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];
    if (!allowedTypes.includes(file.type)) {
      return { isValid: false, error: '–î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: JPG, JPEG, PNG' };
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É (–º–∞–∫—Å 10MB)
    if (file.size > 10 * 1024 * 1024) {
      return { isValid: false, error: '–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 10MB' };
    }

    return { isValid: true };
  };

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É
  const validateAudioFile = (file: File): { isValid: boolean; error?: string } => {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
    if (file.type !== 'audio/wav' && !file.name.toLowerCase().endsWith('.wav')) {
      return { isValid: false, error: '–î–æ–∑–≤–æ–ª–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: WAV' };
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É (–º–∞–∫—Å 100MB)
    if (file.size > 100 * 1024 * 1024) {
      return { isValid: false, error: '–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100MB' };
    }

    return { isValid: true };
  };

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const checkImageDimensions = (file: File): Promise<boolean> => {
    return new Promise((resolve) => {
      const img = document.createElement('img');
      img.onload = () => {
        const isValid = img.width === 3000 && img.height === 3000;
        URL.revokeObjectURL(img.src);
        resolve(isValid);
      };
      img.onerror = () => {
        URL.revokeObjectURL(img.src);
        resolve(false);
      };
      img.src = URL.createObjectURL(file);
    });
  };

  const handleCoverArtChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) {
      setCoverArt({ file: null, isValid: false });
      return;
    }

    const validation = validateCoverArt(file);
    if (!validation.isValid) {
      setCoverArt({ file: null, isValid: false, error: validation.error });
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
        description: validation.error,
        variant: "destructive",
      });
      return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—ñ–≤
    const isDimensionsValid = await checkImageDimensions(file);
    if (!isDimensionsValid) {
      setCoverArt({ file: null, isValid: false, error: "–†–æ–∑–º—ñ—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ 3000x3000 –ø—ñ–∫—Å–µ–ª—ñ–≤" });
      toast({
        title: "–ù–µ–≤—ñ—Ä–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏",
        description: "–û–±–∫–ª–∞–¥–∏–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ 3000x3000 –ø—ñ–∫—Å–µ–ª—ñ–≤",
        variant: "destructive",
      });
      return;
    }

    setCoverArt({ file, isValid: true });
    toast({
      title: "–û–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞",
      description: "–§–∞–π–ª –ø—Ä–æ–π—à–æ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ",
    });
  };

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–∫–∞–º–∏
  const addTrack = () => {
    if (audioFiles.length < 20) {
      setAudioFiles([...audioFiles, { file: null, isValid: false }]);
    }
  };

  const removeTrack = (index: number) => {
    if (audioFiles.length > 1) {
      setAudioFiles(audioFiles.filter((_, i) => i !== index));
    }
  };

  const handleAudioFileChange = (e: React.ChangeEvent<HTMLInputElement>, trackIndex: number) => {
    const file = e.target.files?.[0];
    if (!file) {
      const newAudioFiles = [...audioFiles];
      newAudioFiles[trackIndex] = { file: null, isValid: false };
      setAudioFiles(newAudioFiles);
      return;
    }

    const validation = validateAudioFile(file);
    const newAudioFiles = [...audioFiles];
    
    if (!validation.isValid) {
      newAudioFiles[trackIndex] = { file: null, isValid: false, error: validation.error };
      setAudioFiles(newAudioFiles);
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
        description: validation.error,
        variant: "destructive",
      });
      return;
    }

    newAudioFiles[trackIndex] = { file, isValid: true };
    setAudioFiles(newAudioFiles);
    toast({
      title: "–ê—É–¥—ñ–æ —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ",
      description: "–§–∞–π–ª –ø—Ä–æ–π—à–æ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ",
    });
  };

  const handleNextStep = () => {
    const allAudioFilesValid = audioFiles.every(af => af.isValid);
    if (!coverArt.isValid || !allAudioFilesValid) {
      toast({
        title: "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤—Å—ñ —Ñ–∞–π–ª–∏",
        description: "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É —Ç–∞ –≤—Å—ñ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏",
        variant: "destructive",
      });
      return;
    }
    setCurrentStep("metadata");
  };

  const handleGenerateUpc = async () => {
    setIsGeneratingUpc(true);
    try {
      const response = await apiRequest("POST", "/api/generate-upc");
      const data = await response.json();
      if (data.upc) {
        form.setValue("upc", data.upc);
        toast({
          title: "UPC –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ",
          description: `–ù–æ–≤–∏–π UPC: ${data.upc}`,
        });
      }
    } catch (error) {
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó UPC",
        description: "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ",
        variant: "destructive",
      });
    } finally {
      setIsGeneratingUpc(false);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è–º–∏
  const addPerformer = () => {
    const currentPerformers = form.getValues("performers") || [];
    if (currentPerformers.length < 5) {
      form.setValue("performers", [...currentPerformers, { name: "", role: "" }]);
    }
  };

  const removePerformer = (index: number) => {
    const currentPerformers = form.getValues("performers") || [];
    if (currentPerformers.length > 1) {
      form.setValue("performers", currentPerformers.filter((_, i) => i !== index));
    }
  };

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–æ –∫—Ä–æ–∫—É —Ç—Ä–µ–∫—ñ–≤
  const initializeTracksMetadata = () => {
    if (tracksMetadata.length === 0) {
      const initialTracks = audioFiles.map((_, index) => ({
        title: audioFiles[index].file?.name?.replace(/\.[^/.]+$/, "") || `–¢—Ä–µ–∫ ${index + 1}`,
        version: "",
        primaryGenre: "",
        secondaryGenre: "",
        language: "",
        explicitContent: "no" as const,
        previewStartTime: "00:00:00",
        isrc: "",
        iswc: "",
        pLine: "",
        cLine: "",
        contributors: [{ name: "", role: "main_performer" }],
        hasNoMusic: false,
        hasNoLyrics: false,
        lyrics: "",
      }));
      setTracksMetadata(initialTracks);
    }
  };

  const handleGenerateIsrc = async (trackIndex: number) => {
    setIsGeneratingIsrc(true);
    try {
      const response = await apiRequest("POST", "/api/generate-isrc");
      const data = await response.json();
      if (data.isrc) {
        const newTracksMetadata = [...tracksMetadata];
        newTracksMetadata[trackIndex].isrc = data.isrc;
        setTracksMetadata(newTracksMetadata);
        toast({
          title: "ISRC –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ",
          description: `–ù–æ–≤–∏–π ISRC: ${data.isrc}`,
        });
      }
    } catch (error) {
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó ISRC",
        description: "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ",
        variant: "destructive",
      });
    } finally {
      setIsGeneratingIsrc(false);
    }
  };

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–æ –∫—Ä–æ–∫—É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π
  const initializeTerritories = () => {
    if (selectedTerritories.size === 0) {
      const allTerritories = new Set<string>();
      Object.values(TERRITORIES_DATA).forEach(continentCountries => {
        continentCountries.forEach(country => allTerritories.add(country));
      });
      setSelectedTerritories(allTerritories);
    }
  };

  const onSubmitMetadata = (data: ReleaseMetadata) => {
    setHasAttemptedSubmit(true);
    console.log("Submitted metadata:", data);
    initializeTracksMetadata();
    setCurrentStep("tracks");
  };

  const onCompleteTracksMetadata = () => {
    initializeTerritories();
    setCurrentStep("territories");
  };

  // –õ–æ–≥—ñ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—è–º–∏
  const toggleTerritory = (territory: string) => {
    const newSelected = new Set(selectedTerritories);
    if (newSelected.has(territory)) {
      newSelected.delete(territory);
    } else {
      newSelected.add(territory);
    }
    setSelectedTerritories(newSelected);
  };

  const toggleContinentSelection = (continent: string) => {
    const continentCountries = TERRITORIES_DATA[continent as keyof typeof TERRITORIES_DATA];
    const allSelected = continentCountries.every(country => selectedTerritories.has(country));
    
    const newSelected = new Set(selectedTerritories);
    if (allSelected) {
      // –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ –∫—Ä–∞—ó–Ω–∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—É
      continentCountries.forEach(country => newSelected.delete(country));
    } else {
      // –í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –∫—Ä–∞—ó–Ω–∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—É
      continentCountries.forEach(country => newSelected.add(country));
    }
    setSelectedTerritories(newSelected);
  };

  const getFilteredCountries = () => {
    if (!territorySearchQuery) return TERRITORIES_DATA;
    
    const filtered: Record<string, string[]> = {};
    Object.entries(TERRITORIES_DATA).forEach(([continent, countries]) => {
      const filteredCountries = countries.filter(country =>
        country.toLowerCase().includes(territorySearchQuery.toLowerCase())
      );
      if (filteredCountries.length > 0) {
        filtered[continent] = filteredCountries;
      }
    });
    return filtered;
  };

  const onCompleteRelease = async () => {
    console.log("üöÄ onCompleteRelease function called!");
    console.log("Current step:", currentStep);
    console.log("Selected territories count:", selectedTerritories.size);
    console.log("Tracks metadata count:", tracksMetadata.length);
    
    try {
      const finalReleaseData = {
        releaseMetadata: form.getValues(),
        tracksMetadata,
        selectedTerritories: Array.from(selectedTerritories)
      };

      console.log("‚úÖ Final release data prepared:", finalReleaseData);

      const response = await apiRequest("POST", "/api/releases", finalReleaseData);
      console.log("üì° Request sent, response status:", response.status);

      const result = await response.json();
      console.log("‚úÖ Release created successfully:", result);

      toast({
        title: "–†–µ–ª—ñ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
        description: "–†–µ–ª—ñ–∑ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö",
      });

      // Redirect to catalog after successful creation
      setTimeout(() => {
        window.location.href = "/catalog";
      }, 1500);

    } catch (error) {
      console.error("üí• Error creating release:", error);
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ª—ñ–∑. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="py-6">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 md:px-8">
        <div className="mb-8">
          <h1 className="text-2xl font-semibold text-foreground">–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä–µ–ª—ñ–∑</h1>
          <p className="mt-1 text-sm text-muted-foreground">
            {currentStep === "files" 
              ? "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É —Ç–∞ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–ª—ñ–∑—É"
              : currentStep === "metadata"
                ? "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –º–µ—Ç–∞–¥–∞–Ω—ñ —Ä–µ–ª—ñ–∑—É"
                : currentStep === "tracks"
                  ? "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –º–µ—Ç–∞–¥–∞–Ω—ñ —Ç—Ä–µ–∫—ñ–≤"
                  : "–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –¥–ª—è –¥–∏—Å—Ç—Ä–∏–±—É—Ü—ñ—ó"
            }
          </p>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
        <div className="mb-8">
          <div className="flex items-center space-x-4">
            <div className={`flex items-center space-x-2 ${
              currentStep === "files" ? "text-purple-500" : "text-muted-foreground"
            }`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                currentStep === "files" 
                  ? "bg-purple-500 text-white" 
                  : (coverArt.isValid && audioFiles.every(af => af.isValid))
                    ? "bg-green-500 text-white"
                    : "bg-muted text-muted-foreground"
              }`}>
                {(coverArt.isValid && audioFiles.every(af => af.isValid)) ? (
                  <CheckCircle className="h-4 w-4" />
                ) : (
                  "1"
                )}
              </div>
              <span className="text-sm font-medium">–§–∞–π–ª–∏</span>
            </div>
            <div className="flex-1 h-px bg-border" />
            <div className={`flex items-center space-x-2 ${
              currentStep === "metadata" ? "text-purple-500" : "text-muted-foreground"
            }`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                currentStep === "metadata" 
                  ? "bg-purple-500 text-white" 
                  : currentStep === "tracks"
                    ? "bg-green-500 text-white"
                    : "bg-muted text-muted-foreground"
              }`}>
                {currentStep === "tracks" ? (
                  <CheckCircle className="h-4 w-4" />
                ) : (
                  <FileText className="h-4 w-4" />
                )}
              </div>
              <span className="text-sm font-medium">–ú–µ—Ç–∞–¥–∞–Ω—ñ</span>
            </div>
            <div className="flex-1 h-px bg-border" />
            <div className={`flex items-center space-x-2 ${
              currentStep === "tracks" ? "text-purple-500" : "text-muted-foreground"
            }`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                currentStep === "tracks" 
                  ? "bg-purple-500 text-white" 
                  : currentStep === "territories"
                    ? "bg-green-500 text-white"
                    : "bg-muted text-muted-foreground"
              }`}>
                {currentStep === "territories" ? (
                  <CheckCircle className="h-4 w-4" />
                ) : (
                  <Music className="h-4 w-4" />
                )}
              </div>
              <span className="text-sm font-medium">–¢—Ä–µ–∫–∏</span>
            </div>
            <div className="flex-1 h-px bg-border" />
            <div className={`flex items-center space-x-2 ${
              currentStep === "territories" ? "text-purple-500" : "text-muted-foreground"
            }`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                currentStep === "territories" 
                  ? "bg-purple-500 text-white" 
                  : "bg-muted text-muted-foreground"
              }`}>
                4
              </div>
              <span className="text-sm font-medium">–¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó</span>
            </div>
          </div>
        </div>

        {currentStep === "files" && (
          <div className="space-y-6">
            {/* –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ */}
            <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Image className="h-5 w-5" />
                –û–±–∫–ª–∞–¥–∏–Ω–∫–∞ —Ä–µ–ª—ñ–∑—É
              </CardTitle>
              <CardDescription>
                –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É —É —Ñ–æ—Ä–º–∞—Ç—ñ JPG, JPEG –∞–±–æ PNG —Ä–æ–∑–º—ñ—Ä–æ–º 3000x3000 –ø—ñ–∫—Å–µ–ª—ñ–≤
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center gap-4">
                  <Label htmlFor="cover-art" className="cursor-pointer">
                    <div className="flex items-center gap-2 bg-secondary hover:bg-secondary/80 px-4 py-2 rounded-md">
                      <Upload className="h-4 w-4" />
                      –í–∏–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª
                    </div>
                  </Label>
                  <Input
                    id="cover-art"
                    type="file"
                    accept="image/jpeg,image/jpg,image/png"
                    onChange={handleCoverArtChange}
                    className="hidden"
                    data-testid="cover-art-input"
                  />
                  {coverArt.file && (
                    <div className="flex items-center gap-2">
                      {coverArt.isValid ? (
                        <CheckCircle className="h-5 w-5 text-green-500" />
                      ) : (
                        <AlertCircle className="h-5 w-5 text-red-500" />
                      )}
                      <span className="text-sm">{coverArt.file.name}</span>
                    </div>
                  )}
                </div>
                {coverArt.error && (
                  <p className="text-sm text-red-500">{coverArt.error}</p>
                )}
              </div>
            </CardContent>
          </Card>

          {/* –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤ */}
          <Card>
            <CardHeader>
              <div className="flex justify-between items-center">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <Music className="h-5 w-5" />
                    –ê—É–¥—ñ–æ —Ñ–∞–π–ª–∏
                  </CardTitle>
                  <CardDescription>
                    –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –ø—ñ—Å–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ WAV (–º–∞–∫—Å–∏–º—É–º 20 —Ç—Ä–µ–∫—ñ–≤)
                  </CardDescription>
                </div>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={addTrack}
                  disabled={audioFiles.length >= 20}
                  data-testid="add-track-button"
                  className="flex items-center gap-2"
                >
                  <Plus className="h-4 w-4" />
                  –î–æ–¥–∞—Ç–∏ –ø—ñ—Å–Ω—é
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {audioFiles.map((audioFile, index) => (
                  <div key={index} className="border rounded-lg p-4 space-y-4 relative">
                    {index > 0 && (
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() => removeTrack(index)}
                        className="absolute top-2 right-2 h-8 w-8 p-0 text-red-500 hover:text-red-700"
                        data-testid={`remove-track-${index}`}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    )}
                    
                    <div className="flex items-center gap-4">
                      <Label htmlFor={`audio-file-${index}`} className="cursor-pointer">
                        <div className="flex items-center gap-2 bg-secondary hover:bg-secondary/80 px-4 py-2 rounded-md">
                          <Upload className="h-4 w-4" />
                          –¢—Ä–µ–∫ {index + 1}
                        </div>
                      </Label>
                      <Input
                        id={`audio-file-${index}`}
                        type="file"
                        accept="audio/wav,.wav"
                        onChange={(e) => handleAudioFileChange(e, index)}
                        className="hidden"
                        data-testid={`audio-file-input-${index}`}
                      />
                      {audioFile.file && (
                        <div className="flex items-center gap-2">
                          {audioFile.isValid ? (
                            <CheckCircle className="h-5 w-5 text-green-500" />
                          ) : (
                            <AlertCircle className="h-5 w-5 text-red-500" />
                          )}
                          <span className="text-sm">{audioFile.file.name}</span>
                        </div>
                      )}
                    </div>
                    {audioFile.error && (
                      <p className="text-sm text-red-500">{audioFile.error}</p>
                    )}
                  </div>
                ))}
                
                {audioFiles.length < 20 && (
                  <div className="text-center py-4">
                    <p className="text-sm text-muted-foreground">
                      –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —â–µ {20 - audioFiles.length} —Ç—Ä–µ–∫—ñ–≤
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

            {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö */}
            <div className="flex justify-end">
              <Button 
                onClick={handleNextStep}
                disabled={!coverArt.isValid || !audioFiles.every(af => af.isValid)}
                data-testid="next-step-button"
              >
                –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </div>
        )}

        {currentStep === "metadata" && (
          <div className="space-y-6">
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmitMetadata)} className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                  {/* –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å –∑ –æ–±–∫–ª–∞–¥–∏–Ω–∫–æ—é */}
                  <div className="lg:col-span-1">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-lg">–û–±–∫–ª–∞–¥–∏–Ω–∫–∞</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {coverArt.file && coverArt.isValid ? (
                            <div className="relative aspect-square w-full max-w-[250px] mx-auto">
                              <img 
                                src={URL.createObjectURL(coverArt.file)} 
                                alt="–û–±–∫–ª–∞–¥–∏–Ω–∫–∞ —Ä–µ–ª—ñ–∑—É"
                                className="w-full h-full object-cover rounded-lg border"
                              />
                              <div className="absolute top-2 right-2">
                                <CheckCircle className="h-6 w-6 text-green-500 bg-white rounded-full" />
                              </div>
                            </div>
                          ) : (
                            <div className="aspect-square w-full max-w-[250px] mx-auto bg-muted rounded-lg border border-dashed flex items-center justify-center">
                              <div className="text-center text-muted-foreground">
                                <Image className="h-12 w-12 mx-auto mb-2" />
                                <p className="text-sm">–û–±–∫–ª–∞–¥–∏–Ω–∫–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞</p>
                              </div>
                            </div>
                          )}
                          <div className="text-center">
                            <Button 
                              type="button"
                              variant="outline" 
                              onClick={() => setCurrentStep("files")}
                              size="sm"
                            >
                              –ó–º—ñ–Ω–∏—Ç–∏ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  {/* –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å –∑ —Ñ–æ—Ä–º–æ—é */}
                  <div className="lg:col-span-2">
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2 text-lg">
                          <FileText className="h-5 w-5" />
                          –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–ª—å–±–æ–º
                        </CardTitle>
                        <CardDescription>
                          –ü–æ—á–Ω—ñ—Ç—å –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ —Å–≤–æ–≥–æ —Ä–µ–ª—ñ–∑—É –∑ –º–æ–≤–∏ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div className="space-y-4">
                          {/* –ú–æ–≤–∞ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö */}
                          <FormField
                            control={form.control}
                            name="language"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>* –ú–æ–≤–∞ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö</FormLabel>
                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                  <FormControl>
                                    <SelectTrigger 
                                      data-testid="language-select" 
                                      className={`h-12 ${hasAttemptedSubmit && !field.value ? 'border-red-500 focus:border-red-600' : ''}`}
                                    >
                                      <SelectValue placeholder="Ukrainian" />
                                    </SelectTrigger>
                                  </FormControl>
                                  <SelectContent>
                                    <SelectItem value="ukrainian">Ukrainian</SelectItem>
                                    <SelectItem value="english">English</SelectItem>
                                    <SelectItem value="russian">Russian</SelectItem>
                                    <SelectItem value="german">German</SelectItem>
                                    <SelectItem value="french">French</SelectItem>
                                    <SelectItem value="spanish">Spanish</SelectItem>
                                  </SelectContent>
                                </Select>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          {/* –ù–∞–∑–≤–∞ –∞–ª—å–±–æ–º—É */}
                          <FormField
                            control={form.control}
                            name="title"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>* –ù–∞–∑–≤–∞ –∞–ª—å–±–æ–º—É</FormLabel>
                                <FormControl>
                                  <Input 
                                    placeholder="" 
                                    {...field} 
                                    data-testid="release-title" 
                                    className={`h-12 ${hasAttemptedSubmit && !field.value ? 'border-red-500 focus:border-red-600' : ''}`}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          {/* –í–µ—Ä—Å—ñ—è –∞–ª—å–±–æ–º—É */}
                          <FormField
                            control={form.control}
                            name="albumVersion"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>–í–µ—Ä—Å—ñ—è –∞–ª—å–±–æ–º—É</FormLabel>
                                <FormControl>
                                  <Input placeholder="" {...field} data-testid="album-version" className="h-12" />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          {/* –ñ–∞–Ω—Ä–∏ —É –¥–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ */}
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {/* –ì–æ–ª–æ–≤–Ω–∏–π –∂–∞–Ω—Ä */}
                            <FormField
                              control={form.control}
                              name="primaryGenre"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>* –ì–æ–ª–æ–≤–Ω–∏–π –∂–∞–Ω—Ä</FormLabel>
                                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                                    <FormControl>
                                      <SelectTrigger 
                                        data-testid="primary-genre-select" 
                                        className={`h-12 ${hasAttemptedSubmit && !field.value ? 'border-red-500 focus:border-red-600' : ''}`}
                                      >
                                        <SelectValue placeholder="Pop" />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      <SelectItem value="pop">Pop</SelectItem>
                                      <SelectItem value="rock">Rock</SelectItem>
                                      <SelectItem value="hiphop">Hip-Hop</SelectItem>
                                      <SelectItem value="electronic">Electronic</SelectItem>
                                      <SelectItem value="folk">Folk</SelectItem>
                                      <SelectItem value="jazz">Jazz</SelectItem>
                                      <SelectItem value="classical">Classical</SelectItem>
                                    </SelectContent>
                                  </Select>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />

                            {/* –í—Ç–æ—Ä–∏–Ω–Ω–∏–π –∂–∞–Ω—Ä */}
                            <FormField
                              control={form.control}
                              name="secondaryGenre"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>–í—Ç–æ—Ä–∏–Ω–Ω–∏–π –∂–∞–Ω—Ä</FormLabel>
                                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                                    <FormControl>
                                      <SelectTrigger data-testid="secondary-genre-select" className="h-12">
                                        <SelectValue placeholder="Hip Hop/Rap" />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      <SelectItem value="hiphop-rap">Hip Hop/Rap</SelectItem>
                                      <SelectItem value="indie">Indie</SelectItem>
                                      <SelectItem value="alternative">Alternative</SelectItem>
                                      <SelectItem value="dance">Dance</SelectItem>
                                      <SelectItem value="ambient">Ambient</SelectItem>
                                      <SelectItem value="acoustic">Acoustic</SelectItem>
                                      <SelectItem value="experimental">Experimental</SelectItem>
                                    </SelectContent>
                                  </Select>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </div>

                          {/* –î–∞—Ç–∏ —É –¥–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ */}
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {/* –î–∞—Ç–∞ –ø–µ—Ä—à–æ–≥–æ –≤–∏–ø—É—Å–∫—É */}
                            <FormField
                              control={form.control}
                              name="originalReleaseDate"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>* –î–∞—Ç–∞ –ø–µ—Ä—à–æ–≥–æ –≤–∏–ø—É—Å–∫—É</FormLabel>
                                  <FormControl>
                                    <Input 
                                      type="date" 
                                      {...field} 
                                      data-testid="original-release-date" 
                                      className={`h-12 ${hasAttemptedSubmit && !field.value ? 'border-red-500 focus:border-red-600' : ''}`}
                                      placeholder="–¥–¥.–º–º.—Ä—Ä—Ä—Ä"
                                    />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />

                            {/* –î–∞—Ç–∞ —Ä–µ–ª–∞—É */}
                            <FormField
                              control={form.control}
                              name="releaseDate"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>–î–∞—Ç–∞ —Ä–µ–ª–∞—É</FormLabel>
                                  <div className="relative">
                                    <FormControl>
                                      <Input 
                                        type="date" 
                                        {...field} 
                                        data-testid="release-date" 
                                        className="h-12 pr-10" 
                                        placeholder="–¥–¥.–º–º.—Ä—Ä—Ä—Ä"
                                      />
                                    </FormControl>
                                    <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                      </svg>
                                    </div>
                                  </div>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </div>

                          {/* –°–∞–±-–ª–µ–π–±–ª */}
                          <FormField
                            control={form.control}
                            name="subLabel"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>–°–∞–±-–ª–µ–π–±–ª</FormLabel>
                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                  <FormControl>
                                    <SelectTrigger data-testid="sub-label-select" className="h-12">
                                      <SelectValue placeholder="" />
                                    </SelectTrigger>
                                  </FormControl>
                                  <SelectContent>
                                    <SelectItem value="label1">Label 1</SelectItem>
                                    <SelectItem value="label2">Label 2</SelectItem>
                                    <SelectItem value="label3">Label 3</SelectItem>
                                  </SelectContent>
                                </Select>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          {/* UPC */}
                          <FormField
                            control={form.control}
                            name="upc"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>* UPC</FormLabel>
                                <div className="flex gap-3">
                                  <FormControl>
                                    <Input 
                                      placeholder="" 
                                      {...field} 
                                      data-testid="upc-input"
                                      className={`flex-1 h-12 ${hasAttemptedSubmit && !field.value ? 'border-red-500 focus:border-red-600' : ''}`}
                                    />
                                  </FormControl>
                                  <Button 
                                    type="button" 
                                    onClick={handleGenerateUpc}
                                    disabled={isGeneratingUpc}
                                    data-testid="generate-upc-button"
                                    className="h-12 bg-blue-600 hover:bg-blue-700 text-white px-6"
                                  >
                                    {isGeneratingUpc ? "–ì–µ–Ω–µ—Ä—É—î–º..." : "–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏"}
                                  </Button>
                                </div>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          {/* –í–∏–∫–æ–Ω–∞–≤—Ü—ñ */}
                          <div className="space-y-4">
                            <div className="flex justify-between items-center">
                              <h3 className="text-lg font-medium">–í–∏–∫–æ–Ω–∞–≤—Ü—ñ</h3>
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={addPerformer}
                                disabled={(form.watch("performers") || []).length >= 5}
                                data-testid="add-performer-button"
                                className="flex items-center gap-2"
                              >
                                <Plus className="h-4 w-4" />
                                –î–æ–¥–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
                              </Button>
                            </div>
                            
                            {(form.watch("performers") || []).map((_, index) => (
                              <div key={index} className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 border rounded-lg relative">
                                {index > 0 && (
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => removePerformer(index)}
                                    className="absolute top-2 right-2 h-8 w-8 p-0 text-red-500 hover:text-red-700"
                                    data-testid={`remove-performer-${index}`}
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                )}
                                
                                {/* –Ü–º'—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è */}
                                <FormField
                                  control={form.control}
                                  name={`performers.${index}.name`}
                                  render={({ field }) => (
                                    <FormItem>
                                      <FormLabel>–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∞–ª—å–±–æ–º—É</FormLabel>
                                      <FormControl>
                                        <Input 
                                          placeholder="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è" 
                                          {...field} 
                                          data-testid={`performer-name-${index}`}
                                          className="h-12"
                                        />
                                      </FormControl>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />

                                {/* –ü–æ—Å–∞–¥–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è */}
                                <FormField
                                  control={form.control}
                                  name={`performers.${index}.role`}
                                  render={({ field }) => (
                                    <FormItem>
                                      <FormLabel>–ü–æ—Å–∞–¥–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è</FormLabel>
                                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                                        <FormControl>
                                          <SelectTrigger 
                                            data-testid={`performer-role-${index}`}
                                            className="h-12"
                                          >
                                            <SelectValue placeholder="–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–∞–¥—É" />
                                          </SelectTrigger>
                                        </FormControl>
                                        <SelectContent>
                                          <SelectItem value="main_performer">Main Performer</SelectItem>
                                          <SelectItem value="featuring">Featuring (Feat)</SelectItem>
                                          <SelectItem value="remixer">Remixer</SelectItem>
                                        </SelectContent>
                                      </Select>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />
                              </div>
                            ))}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó */}
                <div className="flex justify-between">
                  <Button 
                    type="button"
                    variant="outline" 
                    onClick={() => setCurrentStep("files")}
                    data-testid="back-button"
                  >
                    <ArrowLeft className="mr-2 h-4 w-4" />
                    –ù–∞–∑–∞–¥
                  </Button>
                  <Button 
                    type="submit"
                    data-testid="submit-metadata-button"
                    className="bg-blue-600 hover:bg-blue-700 text-white"
                  >
                    –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ —Ç—Ä–µ–∫—ñ–≤
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                </div>
              </form>
            </Form>
          </div>
        )}

        {currentStep === "tracks" && (
          <div className="space-y-6">
            {/* –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –º—ñ–∂ —Ç—Ä–µ–∫–∞–º–∏ */}
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">–ú–µ—Ç–∞–¥–∞–Ω—ñ —Ç—Ä–µ–∫—ñ–≤</h2>
              <div className="flex items-center gap-2">
                {audioFiles.map((_, index) => (
                  <Button
                    key={index}
                    variant={currentTrackIndex === index ? "default" : "outline"}
                    size="sm"
                    onClick={() => setCurrentTrackIndex(index)}
                    data-testid={`track-nav-${index}`}
                  >
                    –¢—Ä–µ–∫ {index + 1}
                  </Button>
                ))}
              </div>
            </div>

            {/* –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–∫—É */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Music className="h-5 w-5" />
                  {audioFiles[currentTrackIndex]?.file?.name || `–¢—Ä–µ–∫ ${currentTrackIndex + 1}`}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="info" className="w-full">
                  <TabsList className="grid w-full grid-cols-3">
                    <TabsTrigger value="info" data-testid="info-tab">–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç—Ä–µ–∫</TabsTrigger>
                    <TabsTrigger value="performers" data-testid="performers-tab">–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å —Ç—Ä–µ–∫—É</TabsTrigger>
                    <TabsTrigger value="lyrics" data-testid="lyrics-tab">–¢–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="info" className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {/* –ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ */}
                      <div className="md:col-span-2">
                        <Label htmlFor="track-title">* –ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ</Label>
                        <Input
                          id="track-title"
                          value={tracksMetadata[currentTrackIndex]?.title || ""}
                          onChange={(e) => {
                            const newTracksMetadata = [...tracksMetadata];
                            if (newTracksMetadata[currentTrackIndex]) {
                              newTracksMetadata[currentTrackIndex].title = e.target.value;
                              setTracksMetadata(newTracksMetadata);
                            }
                          }}
                          className="h-12"
                          data-testid="track-title-input"
                        />
                      </div>

                      {/* –í–µ—Ä—Å—ñ—è –ø—ñ—Å–Ω—ñ */}
                      <div className="md:col-span-2">
                        <Label htmlFor="track-version">–í–µ—Ä—Å—ñ—è –ø—ñ—Å–Ω—ñ</Label>
                        <Input
                          id="track-version"
                          value={tracksMetadata[currentTrackIndex]?.version || ""}
                          onChange={(e) => {
                            const newTracksMetadata = [...tracksMetadata];
                            if (newTracksMetadata[currentTrackIndex]) {
                              newTracksMetadata[currentTrackIndex].version = e.target.value;
                              setTracksMetadata(newTracksMetadata);
                            }
                          }}
                          className="h-12"
                          data-testid="track-version-input"
                        />
                      </div>

                      {/* –ñ–∞–Ω—Ä–∏ */}
                      <div>
                        <Label htmlFor="track-primary-genre">* –ì–æ–ª–æ–≤–Ω–∏–π –∂–∞–Ω—Ä</Label>
                        <Select
                          value={tracksMetadata[currentTrackIndex]?.primaryGenre || ""}
                          onValueChange={(value) => {
                            const newTracksMetadata = [...tracksMetadata];
                            if (newTracksMetadata[currentTrackIndex]) {
                              newTracksMetadata[currentTrackIndex].primaryGenre = value;
                              setTracksMetadata(newTracksMetadata);
                            }
                          }}
                        >
                          <SelectTrigger className="h-12" data-testid="track-primary-genre">
                            <SelectValue placeholder="Pop" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="pop">Pop</SelectItem>
                            <SelectItem value="rock">Rock</SelectItem>
                            <SelectItem value="hip-hop">Hip Hop/Rap</SelectItem>
                            <SelectItem value="electronic">Electronic</SelectItem>
                            <SelectItem value="jazz">Jazz</SelectItem>
                            <SelectItem value="classical">Classical</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <Label htmlFor="track-secondary-genre">–í—Ç–æ—Ä–∏–Ω–Ω–∏–π –∂–∞–Ω—Ä</Label>
                        <Select
                          value={tracksMetadata[currentTrackIndex]?.secondaryGenre || ""}
                          onValueChange={(value) => {
                            const newTracksMetadata = [...tracksMetadata];
                            if (newTracksMetadata[currentTrackIndex]) {
                              newTracksMetadata[currentTrackIndex].secondaryGenre = value;
                              setTracksMetadata(newTracksMetadata);
                            }
                          }}
                        >
                          <SelectTrigger className="h-12" data-testid="track-secondary-genre">
                            <SelectValue placeholder="Hip Hop/Rap" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="pop">Pop</SelectItem>
                            <SelectItem value="rock">Rock</SelectItem>
                            <SelectItem value="hip-hop">Hip Hop/Rap</SelectItem>
                            <SelectItem value="electronic">Electronic</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      {/* –ú–æ–≤–∞ —Ä–µ–ª—ñ–∑—É */}
                      <div>
                        <Label htmlFor="track-language">* –ú–æ–≤–∞ —Ä–µ–ª—ñ–∑—É</Label>
                        <Select
                          value={tracksMetadata[currentTrackIndex]?.language || ""}
                          onValueChange={(value) => {
                            const newTracksMetadata = [...tracksMetadata];
                            if (newTracksMetadata[currentTrackIndex]) {
                              newTracksMetadata[currentTrackIndex].language = value;
                              setTracksMetadata(newTracksMetadata);
                            }
                          }}
                        >
                          <SelectTrigger className="h-12" data-testid="track-language">
                            <SelectValue placeholder="Ukrainian" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="ukrainian">Ukrainian</SelectItem>
                            <SelectItem value="english">English</SelectItem>
                            <SelectItem value="russian">Russian</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      {/* –í—ñ–¥–≤–µ—Ä—Ç–∏–π –≤–º—ñ—Å—Ç */}
                      <div>
                        <Label>* –ß–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫ –≤—ñ–¥–≤–µ—Ä—Ç–∏–π –≤–º—ñ—Å—Ç?</Label>
                        <div className="flex gap-4 mt-2">
                          {[
                            { value: "yes", label: "–î–∞" },
                            { value: "no", label: "–ù—ñ" },
                            { value: "censored", label: "–¶–µ–Ω–∑—É—Ä–∞" }
                          ].map((option) => (
                            <Button
                              key={option.value}
                              type="button"
                              variant={tracksMetadata[currentTrackIndex]?.explicitContent === option.value ? "default" : "outline"}
                              onClick={() => {
                                const newTracksMetadata = [...tracksMetadata];
                                if (newTracksMetadata[currentTrackIndex]) {
                                  newTracksMetadata[currentTrackIndex].explicitContent = option.value as "yes" | "no" | "censored";
                                  setTracksMetadata(newTracksMetadata);
                                }
                              }}
                              data-testid={`explicit-${option.value}`}
                            >
                              {option.label}
                            </Button>
                          ))}
                        </div>
                      </div>

                      {/* –ß–∞—Å –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω—å */}
                      <div className="md:col-span-2">
                        <Label htmlFor="preview-start">–ß–∞—Å –ø–æ—á–∞—Ç–∫—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è</Label>
                        <Input
                          id="preview-start"
                          value={tracksMetadata[currentTrackIndex]?.previewStartTime || "00:00:00"}
                          onChange={(e) => {
                            const newTracksMetadata = [...tracksMetadata];
                            if (newTracksMetadata[currentTrackIndex]) {
                              newTracksMetadata[currentTrackIndex].previewStartTime = e.target.value;
                              setTracksMetadata(newTracksMetadata);
                            }
                          }}
                          placeholder="00:00:50"
                          className="h-12"
                          data-testid="preview-start-input"
                        />
                      </div>

                      {/* ISRC */}
                      <div className="md:col-span-2">
                        <Label htmlFor="track-isrc">* ISRC</Label>
                        <div className="flex gap-3">
                          <Input
                            id="track-isrc"
                            value={tracksMetadata[currentTrackIndex]?.isrc || ""}
                            onChange={(e) => {
                              const newTracksMetadata = [...tracksMetadata];
                              if (newTracksMetadata[currentTrackIndex]) {
                                newTracksMetadata[currentTrackIndex].isrc = e.target.value;
                                setTracksMetadata(newTracksMetadata);
                              }
                            }}
                            className="flex-1 h-12"
                            data-testid="track-isrc-input"
                          />
                          <Button
                            type="button"
                            onClick={() => handleGenerateIsrc(currentTrackIndex)}
                            disabled={isGeneratingIsrc}
                            className="h-12 bg-blue-600 hover:bg-blue-700 text-white px-6"
                            data-testid="generate-isrc-button"
                          >
                            {isGeneratingIsrc ? "–ì–µ–Ω–µ—Ä—É—î–º..." : "–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏"}
                          </Button>
                        </div>
                      </div>

                      {/* ISWC */}
                      <div className="md:col-span-2">
                        <Label htmlFor="track-iswc">ISWC</Label>
                        <Input
                          id="track-iswc"
                          value={tracksMetadata[currentTrackIndex]?.iswc || ""}
                          onChange={(e) => {
                            const newTracksMetadata = [...tracksMetadata];
                            if (newTracksMetadata[currentTrackIndex]) {
                              newTracksMetadata[currentTrackIndex].iswc = e.target.value;
                              setTracksMetadata(newTracksMetadata);
                            }
                          }}
                          className="h-12"
                          data-testid="track-iswc-input"
                        />
                      </div>

                      {/* –ü—Ä–∞–≤–∞ */}
                      <div className="md:col-span-2">
                        <h4 className="font-medium mb-4">–ü—Ä–∞–≤–∞</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <Label htmlFor="p-line">‚Ñó –†—ñ–∫ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–∞–Ω–Ω—è</Label>
                            <Input
                              id="p-line"
                              value={tracksMetadata[currentTrackIndex]?.pLine || ""}
                              onChange={(e) => {
                                const newTracksMetadata = [...tracksMetadata];
                                if (newTracksMetadata[currentTrackIndex]) {
                                  newTracksMetadata[currentTrackIndex].pLine = e.target.value;
                                  setTracksMetadata(newTracksMetadata);
                                }
                              }}
                              className="h-12"
                              data-testid="p-line-input"
                            />
                          </div>
                          <div>
                            <Label htmlFor="c-line">¬© —Ç–µ–∫—Å—Ç</Label>
                            <Input
                              id="c-line"
                              value={tracksMetadata[currentTrackIndex]?.cLine || ""}
                              onChange={(e) => {
                                const newTracksMetadata = [...tracksMetadata];
                                if (newTracksMetadata[currentTrackIndex]) {
                                  newTracksMetadata[currentTrackIndex].cLine = e.target.value;
                                  setTracksMetadata(newTracksMetadata);
                                }
                              }}
                              className="h-12"
                              data-testid="c-line-input"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="performers" className="space-y-6">
                    <div className="space-y-4">
                      {(tracksMetadata[currentTrackIndex]?.contributors || []).map((contributor, index) => (
                        <div key={index} className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 border rounded-lg relative">
                          {index > 0 && (
                            <Button
                              type="button"
                              variant="ghost"
                              size="sm"
                              onClick={() => {
                                const newTracksMetadata = [...tracksMetadata];
                                if (newTracksMetadata[currentTrackIndex]?.contributors) {
                                  newTracksMetadata[currentTrackIndex].contributors = 
                                    newTracksMetadata[currentTrackIndex].contributors.filter((_, i) => i !== index);
                                  setTracksMetadata(newTracksMetadata);
                                }
                              }}
                              className="absolute top-2 right-2 h-8 w-8 p-0 text-red-500 hover:text-red-700"
                              data-testid={`remove-contributor-${index}`}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          )}
                          
                          <div>
                            <Label htmlFor={`contributor-name-${index}`}>–Ü–º'—è</Label>
                            <Input
                              id={`contributor-name-${index}`}
                              value={contributor.name}
                              onChange={(e) => {
                                const newTracksMetadata = [...tracksMetadata];
                                if (newTracksMetadata[currentTrackIndex]?.contributors?.[index]) {
                                  newTracksMetadata[currentTrackIndex].contributors[index].name = e.target.value;
                                  setTracksMetadata(newTracksMetadata);
                                }
                              }}
                              className="h-12"
                              data-testid={`contributor-name-${index}`}
                            />
                          </div>
                          
                          <div>
                            <Label htmlFor={`contributor-role-${index}`}>–†–æ–ª—å</Label>
                            <Select
                              value={contributor.role}
                              onValueChange={(value) => {
                                const newTracksMetadata = [...tracksMetadata];
                                if (newTracksMetadata[currentTrackIndex]?.contributors?.[index]) {
                                  newTracksMetadata[currentTrackIndex].contributors[index].role = value;
                                  setTracksMetadata(newTracksMetadata);
                                }
                              }}
                            >
                              <SelectTrigger className="h-12" data-testid={`contributor-role-${index}`}>
                                <SelectValue placeholder="Main Performer" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="main_performer">Main Performer</SelectItem>
                                <SelectItem value="composer">Composer</SelectItem>
                                <SelectItem value="lyricist">Lyricist</SelectItem>
                                <SelectItem value="arranger">Arranger</SelectItem>
                                <SelectItem value="mixing_engineer">Mixing Engineer</SelectItem>
                                <SelectItem value="mastering_engineer">Mastering Engineer</SelectItem>
                                <SelectItem value="musician">Musician</SelectItem>
                                <SelectItem value="backing_vocalist">Backing Vocalist</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        </div>
                      ))}
                      
                      <div className="flex flex-col gap-4">
                        <div className="flex items-center space-x-2">
                          <Checkbox 
                            id="no-music"
                            checked={tracksMetadata[currentTrackIndex]?.hasNoMusic || false}
                            onCheckedChange={(checked) => {
                              const newTracksMetadata = [...tracksMetadata];
                              if (newTracksMetadata[currentTrackIndex]) {
                                newTracksMetadata[currentTrackIndex].hasNoMusic = !!checked;
                                setTracksMetadata(newTracksMetadata);
                              }
                            }}
                            data-testid="no-music-checkbox"
                          />
                          <Label htmlFor="no-music">–ü—ñ—Å–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –º—É–∑–∏–∫–∏</Label>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <Checkbox 
                            id="no-lyrics"
                            checked={tracksMetadata[currentTrackIndex]?.hasNoLyrics || false}
                            onCheckedChange={(checked) => {
                              const newTracksMetadata = [...tracksMetadata];
                              if (newTracksMetadata[currentTrackIndex]) {
                                newTracksMetadata[currentTrackIndex].hasNoLyrics = !!checked;
                                setTracksMetadata(newTracksMetadata);
                              }
                            }}
                            data-testid="no-lyrics-checkbox"
                          />
                          <Label htmlFor="no-lyrics">–ü—ñ—Å–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç—É</Label>
                        </div>
                        
                        <Button
                          type="button"
                          variant="outline"
                          onClick={() => {
                            const newTracksMetadata = [...tracksMetadata];
                            if (newTracksMetadata[currentTrackIndex]) {
                              if (!newTracksMetadata[currentTrackIndex].contributors) {
                                newTracksMetadata[currentTrackIndex].contributors = [];
                              }
                              newTracksMetadata[currentTrackIndex].contributors.push({ name: "", role: "musician" });
                              setTracksMetadata(newTracksMetadata);
                            }
                          }}
                          className="flex items-center gap-2"
                          data-testid="add-contributor-button"
                        >
                          <Plus className="h-4 w-4" />
                          –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à–æ–≥–æ –º—É–∑–∏–∫–∞–Ω—Ç–∞
                        </Button>
                      </div>
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="lyrics" className="space-y-6">
                    <div>
                      <Label htmlFor="track-lyrics">–¢–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ</Label>
                      <Textarea
                        id="track-lyrics"
                        value={tracksMetadata[currentTrackIndex]?.lyrics || ""}
                        onChange={(e) => {
                          const newTracksMetadata = [...tracksMetadata];
                          if (newTracksMetadata[currentTrackIndex]) {
                            newTracksMetadata[currentTrackIndex].lyrics = e.target.value;
                            setTracksMetadata(newTracksMetadata);
                          }
                        }}
                        placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ..."
                        className="min-h-[400px] resize-none"
                        data-testid="track-lyrics-textarea"
                      />
                    </div>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>

            {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó */}
            <div className="flex justify-between">
              <Button 
                type="button"
                variant="outline" 
                onClick={() => setCurrentStep("metadata")}
                data-testid="back-to-metadata-button"
              >
                <ArrowLeft className="mr-2 h-4 w-4" />
                –ù–∞–∑–∞–¥ –¥–æ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
              </Button>
              <Button 
                onClick={onCompleteTracksMetadata}
                className="bg-blue-600 hover:bg-blue-700 text-white"
                data-testid="continue-to-territories-button"
              >
                –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </div>
        )}

        {currentStep === "territories" && (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Globe className="h-5 w-5" />
                  –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –¥–∏—Å—Ç—Ä–∏–±—É—Ü—ñ—ó
                </CardTitle>
                <CardDescription>
                  –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω–∏ —Ç–∞ —Ä–µ–≥—ñ–æ–Ω–∏, –¥–µ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤–∞—à —Ä–µ–ª—ñ–∑. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –æ–±—Ä–∞–Ω–æ –≤—Å—ñ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* –ü–æ—à—É–∫ –∫—Ä–∞—ó–Ω */}
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                  <Input
                    placeholder="–ö—Ä–∞—ó–Ω–∞ –ø–æ—à—É–∫—É"
                    value={territorySearchQuery}
                    onChange={(e) => setTerritorySearchQuery(e.target.value)}
                    className="pl-10 h-12"
                    data-testid="territory-search"
                  />
                </div>

                {/* –°–ø–∏—Å–∫–∏ –∫—Ä–∞—ó–Ω –ø–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞—Ö */}
                <div className="space-y-6">
                  {Object.entries(getFilteredCountries()).map(([continent, countries]) => {
                    const selectedCount = countries.filter(country => selectedTerritories.has(country)).length;
                    const totalCount = countries.length;
                    const allSelected = selectedCount === totalCount;

                    return (
                      <div key={continent} className="space-y-4">
                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—É */}
                        <div className="flex items-center justify-between bg-muted/50 p-4 rounded-lg">
                          <div className="flex items-center gap-3">
                            <span className="text-sm font-medium text-blue-600">
                              {selectedCount}/{totalCount}
                            </span>
                            <h3 className="font-semibold">{continent}</h3>
                          </div>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => toggleContinentSelection(continent)}
                            className="text-blue-600 hover:text-blue-700"
                            data-testid={`select-all-${continent.toLowerCase()}`}
                          >
                            {allSelected ? "–°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å–µ" : "–í–∏–±—Ä–∞—Ç–∏ –≤—Å–µ"}
                            <CheckCircle className={`ml-2 h-4 w-4 ${allSelected ? "text-green-600" : ""}`} />
                          </Button>
                        </div>

                        {/* –°—ñ—Ç–∫–∞ –∫—Ä–∞—ó–Ω */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                          {countries.map((country) => {
                            const isSelected = selectedTerritories.has(country);
                            return (
                              <button
                                key={country}
                                onClick={() => toggleTerritory(country)}
                                className={`
                                  flex items-center gap-3 p-3 rounded-lg border transition-all text-left
                                  ${isSelected 
                                    ? "border-blue-500 bg-blue-50 dark:bg-blue-950/30" 
                                    : "border-border hover:border-border/80 hover:bg-muted/50"
                                  }
                                `}
                                data-testid={`territory-${country.toLowerCase().replace(/\s+/g, '-')}`}
                              >
                                {/* –ó–∞–º—ñ—Å—Ç—å –ø—Ä–∞–ø–æ—Ä—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–ª—å–æ—Ä–æ–≤—ñ –∫—Ä—É–∂–∫–∏ */}
                                <div className={`
                                  w-4 h-4 rounded-full flex-shrink-0
                                  ${isSelected ? "bg-blue-500" : "bg-muted-foreground/30"}
                                `} />
                                <span className={`
                                  text-sm font-medium truncate
                                  ${isSelected ? "text-blue-700 dark:text-blue-300" : "text-foreground"}
                                `}>
                                  {country}
                                </span>
                                {isSelected && (
                                  <CheckCircle className="h-4 w-4 text-blue-500 ml-auto flex-shrink-0" />
                                )}
                              </button>
                            );
                          })}
                        </div>
                      </div>
                    );
                  })}
                </div>

                {/* –ü—ñ–¥—Å—É–º–æ–∫ –≤–∏–±–æ—Ä—É */}
                <div className="bg-muted/30 p-4 rounded-lg">
                  <p className="text-sm text-muted-foreground">
                    –û–±—Ä–∞–Ω–æ <span className="font-semibold text-foreground">{selectedTerritories.size}</span> –∑{' '}
                    <span className="font-semibold text-foreground">
                      {Object.values(TERRITORIES_DATA).flat().length}
                    </span> –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó */}
            <div className="flex justify-between">
              <Button 
                type="button"
                variant="outline" 
                onClick={() => setCurrentStep("tracks")}
                data-testid="back-to-tracks-button"
              >
                <ArrowLeft className="mr-2 h-4 w-4" />
                –ù–∞–∑–∞–¥ –¥–æ —Ç—Ä–µ–∫—ñ–≤
              </Button>
              <Button
                type="button"

                onClick={onCompleteRelease}
                className="bg-green-600 hover:bg-green-700 text-white"
                data-testid="complete-release-button"
              >
                –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–ª—ñ–∑—É
                <CheckCircle className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
